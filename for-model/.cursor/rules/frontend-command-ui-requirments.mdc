---
description: 기초적인 Vue3 구조의 컴포넌트예시를 통해 제공된 HTML코드를 Vue3로 변환하여 BoundedContext내부에 구성되는 Aggregate별 Command와 관련하여 생성되어야 하는 UI에 대한 통일된 구조의 컴포넌트 가이드라인을 제공합니다.
alwaysApply: false
---


1. Button

```
<template>
  <v-btn @click="handleClick" color="primary">
    Click Me
  </v-btn>
</template>

<script setup>
const handleClick = () => {
  console.log('Button clicked!')
}
</script>
```

2. Dialog
```
<template>
  <div>
    <v-btn @click="dialog = true" color="primary">
      Open Dialog
    </v-btn>
    
    <v-dialog v-model="dialog" max-width="400">
      <v-card>
        <v-card-title>Dialog Title</v-card-title>
        <v-card-text>Dialog content goes here.</v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn @click="dialog = false">Cancel</v-btn>
          <v-btn @click="confirm" color="primary">OK</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </div>
</template>

<script setup>
import { ref } from 'vue'

const dialog = ref(false)

const confirm = () => {
  console.log('Confirmed!')
  dialog.value = false
}
</script>
```

3. Snackbar
```
<template>
  <div>
    <v-btn @click="showSnackbar" color="primary">
      Show Notification
    </v-btn>
    
    <v-snackbar v-model="snackbar" timeout="3000">
      {{ message }}
      <template v-slot:actions>
        <v-btn @click="snackbar = false">Close</v-btn>
      </template>
    </v-snackbar>
  </div>
</template>

<script setup>
import { ref } from 'vue'

const snackbar = ref(false)
const message = ref('This is a notification!')

const showSnackbar = () => {
  snackbar.value = true
}
</script>
```
아래 생성된 Command에 따른 UI HTML코드는 위에 제공된 Vue3 구조의 기초되는 컴포넌트를 참고하여 변환되어야 한다.
이때 각 생성되는 파일의 위치는 @frontend-package-structure를 참고하며, 그에 따른 style은 @frontend-design-system을 참고하여 코드를 생성해야한다.
{{#if boundedContexts}}
{{#boundedContexts}}
{{#attached 'UI' this}}
{{boundedContext.name}}
{{#attached 'Command'this}}
{{name}}
```
{{../runTimeTemplateHtml}}
```
{{/attached}}

{{/attached}}
{{/boundedContexts}}
{{/if}}