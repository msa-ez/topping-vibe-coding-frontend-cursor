---
title: Frontend Design System
description: Integrated design system based on Vue 3 + Vuetify. Provides comprehensive guidelines for consistent UI/UX including colors, typography, component styles, and animations.
---

# Frontend Design System

A clean and modern design system based on Vue 3 + Vuetify. Provides guidelines for consistent user experience and maintainable code.

## üé® Color Palette

### Primary Colors
```javascript
// Light Theme
primary: '#3B82F6',      // Modern blue (primary actions, brand)
secondary: '#64748B',    // Slate gray (secondary elements)
accent: '#06B6D4',       // Cyan (accent elements)

// Dark Theme  
primary: '#60A5FA',      // Light blue
secondary: '#94A3B8',    // Light slate
accent: '#22D3EE',       // Light cyan
```

### Semantic Colors
```javascript
// Light Theme
success: '#10B981',      // Emerald (success, completion)
warning: '#F59E0B',      // Amber (warning, caution)
error: '#EF4444',        // Red (error, deletion)
info: '#3B82F6',         // Blue (information, notification)

// Dark Theme
success: '#34D399',      // Light emerald
warning: '#FBBF24',      // Light amber  
error: '#F87171',        // Light red
info: '#60A5FA',         // Light blue
```

### Surface Colors
```javascript
// Light Theme
background: '#F8FAFC',   // Light gray (overall background)
surface: '#FFFFFF',      // White (card, modal background)

// Dark Theme
background: '#0F172A',   // Dark navy (overall background)
surface: '#1E293B',      // Dark slate (card, modal background)
```

### Color Usage Principles
- **Primary**: Main action buttons, brand elements, active states
- **Secondary**: Secondary buttons, inactive states, descriptive text
- **Accent**: Special emphasis, hover states, point colors
- **Semantic**: Status-based feedback (success/warning/error/information)

## üìù Typography

### Font Size System
```scss
// Display Titles (main titles)
.display-title {
  font-size: 2.5rem;        // 40px
  font-weight: 700;
  letter-spacing: -0.025em;
  line-height: 1.2;
}

// Section Headings (section titles)
.section-heading {
  font-size: 1.25rem;       // 20px
  font-weight: 600;
  margin-bottom: 0.5rem;
}

// Card Titles (card titles)
.card-title {
  font-size: 1.125rem;      // 18px
  font-weight: 600;
}

// Body Text (body text)
.body-text {
  font-size: 1rem;          // 16px
  font-weight: 400;
  line-height: 1.6;
}

// Caption Text (captions)
.caption-text {
  font-size: 0.875rem;      // 14px
  opacity: 0.7;
}
```

### Text Color Usage
```scss
// Primary text
color: rgb(var(--v-theme-on-background));

// Secondary text  
color: rgb(var(--v-theme-on-background));
opacity: 0.7;

// Caption/Description
.text-medium-emphasis {
  opacity: 0.6;
}
```

## üèóÔ∏è Layout & Spacing

### Container System
```scss
// Main container
.main-container {
  max-width: 1200px;
  padding: 1.5rem;         // 24px
  margin: 0 auto;
}

// Card padding
.card-padding {
  padding: 1.5rem;         // 24px
}

// Section spacing
.section-spacing {
  margin-bottom: 2rem;     // 32px
}
```

### Grid System
```html
<!-- Statistics card grid -->
<v-row class="mb-8">
  <v-col cols="12" sm="6" md="3">
    <!-- 4 column grid -->
  </v-col>
</v-row>

<!-- Service card grid -->
<v-row class="mb-8">
  <v-col cols="12" md="4">
    <!-- 3 column grid -->
  </v-col>
</v-row>
```

## üé¥ Component Style Guide

### Card Style
```scss
.modern-card {
  background: rgb(var(--v-theme-surface));
  border: 1px solid rgba(var(--v-theme-on-surface), 0.08);
  border-radius: 12px;
  transition: all 0.2s ease;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
  }
}
```

### Button Style
```html
<!-- Primary Button -->
<v-btn color="primary" variant="flat" size="large">
  <v-icon start>mdi-plus</v-icon>
  Primary Action
</v-btn>

<!-- Secondary Button -->
<v-btn color="secondary" variant="outlined" size="large">
  Secondary Action  
</v-btn>

<!-- Text Button -->
<v-btn variant="text" color="primary">
  Text Action
</v-btn>
```

### Icon Avatar
```html
<v-avatar :color="avatarColor" size="48">
  <v-icon :icon="iconName" color="white" />
</v-avatar>
```

### Status Chips
```html
<!-- Success status -->
<v-chip color="success" variant="flat" size="small">
  Active
</v-chip>

<!-- Warning status -->
<v-chip color="warning" variant="flat" size="small">  
  Pending
</v-chip>

<!-- Error status -->
<v-chip color="error" variant="flat" size="small">
  Stopped
</v-chip>
```

## üìä Data Table Style

### Table Container
```scss
.data-table-card {
  background: rgb(var(--v-theme-surface));
  border: 1px solid rgba(var(--v-theme-on-surface), 0.08);
  border-radius: 12px;
}

.custom-data-table :deep(.v-data-table-header) {
  background: rgba(var(--v-theme-primary), 0.04);
}

.custom-data-table :deep(.v-data-table__tr:hover) {
  background: rgba(var(--v-theme-primary), 0.04);
}
```

### Action Buttons
```html
<div class="action-buttons">
  <v-btn icon="mdi-pencil" size="small" variant="text" color="primary" />
  <v-btn icon="mdi-delete" size="small" variant="text" color="error" />
</div>
```

## üé≠ Animation & Interaction

### Hover Effects
```scss
// Card hover
.hover-card {
  transition: all 0.2s ease;
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.12);
  }
}

// Button hover  
.hover-button {
  transition: all 0.2s ease;
  
  &:hover {
    transform: translateY(-1px);
  }
}
```

### Loading States
```html
<!-- Skeleton loader -->
<v-skeleton-loader type="table-tbody" />

<!-- Spinner -->
<v-progress-circular indeterminate color="primary" />
```

## üåô Dark Mode Support

### Theme Toggle
```javascript
import { useTheme } from 'vuetify'

const theme = useTheme()

const toggleTheme = () => {
  theme.global.name.value = theme.global.current.value.dark ? 'light' : 'dark'
}
```

### CSS Variable Usage
```scss
// Colors that automatically change according to theme
background: rgb(var(--v-theme-background));
color: rgb(var(--v-theme-on-background));
border-color: rgba(var(--v-theme-on-surface), 0.08);
```

## üì± Responsive Design

### Breakpoints
```scss
// Mobile First
@media (max-width: 600px) {
  .responsive-text {
    font-size: 1.5rem;
  }
  
  .responsive-grid {
    grid-template-columns: 1fr;
  }
}

// Tablet
@media (min-width: 960px) {
  .responsive-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

// Desktop
@media (min-width: 1280px) {
  .responsive-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}
```

### Vuetify Grid Usage
```html
<!-- Responsive columns -->
<v-col cols="12" sm="6" md="4" lg="3">
  <!-- Content -->
</v-col>
```

## üîÑ Navigation System

### Sidebar Style
```scss
.app-drawer {
  background: rgb(var(--v-theme-surface));
  border-right: 1px solid rgba(var(--v-theme-on-surface), 0.08);
}

.drawer-header {
  background: rgba(var(--v-theme-primary), 0.04);
}

.nav-item {
  margin-bottom: 4px;
  border-radius: 8px;
  transition: all 0.2s ease;
  
  &:hover {
    background: rgba(var(--v-theme-primary), 0.08);
  }
  
  &.v-list-item--active {
    background: rgba(var(--v-theme-primary), 0.12);
    color: rgb(var(--v-theme-primary));
  }
}
```

### App Bar Style
```scss
.app-bar {
  border-bottom: 1px solid rgba(var(--v-theme-on-surface), 0.08);
  backdrop-filter: blur(8px);
}
```

## ‚ôø Accessibility Guidelines

### Color Contrast
- Maintain minimum 4.5:1 contrast ratio between text and background
- Express important information with icons/text in addition to color

### Keyboard Navigation
- Apply tab order to all interactive elements
- Provide focus indicators

### Screen Reader Support  
```html
<!-- aria-label usage -->
<v-btn aria-label="Open menu" icon="mdi-menu" />

<!-- Alternative text provision -->
<v-icon aria-hidden="true">mdi-check</v-icon>
<span class="sr-only">Completed</span>
```

## üöÄ Usage Examples

### When Creating New Pages
```vue
<template>
  <div class="page-wrapper">
    <v-container fluid class="pa-6">
      <!-- Page header -->
      <v-row class="mb-8">
        <v-col>
          <div class="header-section">
            <h1 class="display-title">Page Title</h1>
            <p class="subtitle">Page Description</p>
          </div>
        </v-col>
      </v-row>
      
      <!-- Main content -->
      <v-row>
        <v-col cols="12">
          <v-card class="modern-card">
            <!-- Card content -->
          </v-card>
        </v-col>
      </v-row>
    </v-container>
  </div>
</template>

<style scoped>
.page-wrapper {
  min-height: 100vh;
  background: rgb(var(--v-theme-background));
}
</style>
```

### When Creating New Card Components
```vue
<v-card class="modern-card" elevation="0" variant="flat">
  <v-card-text class="pa-6">
    <!-- Card header -->
    <div class="d-flex align-center mb-4">
      <v-avatar color="primary" size="48" class="mr-4">
        <v-icon icon="mdi-icon" color="white" />
      </v-avatar>
      <div>
        <h3 class="text-h6 font-weight-bold">Card Title</h3>
        <p class="text-body-2 text-medium-emphasis">Card Description</p>
      </div>
    </div>
    
    <!-- Card content -->
    <p class="text-body-2 mb-4">Card Content</p>
    
    <!-- Card actions -->
    <div class="d-flex align-center justify-space-between">
      <v-chip color="success" variant="flat" size="small">
        Status
      </v-chip>
      <v-icon color="primary" size="20">mdi-arrow-right</v-icon>
    </div>
  </v-card-text>
</v-card>
```

## üìã Checklist

Please verify the following when creating new components or pages:

### üé® Design
- [ ] Use defined color palette
- [ ] Apply consistent typography  
- [ ] Use appropriate spacing and padding
- [ ] Follow card style guidelines

### üîß Functionality
- [ ] Dark mode support
- [ ] Responsive design implementation
- [ ] Hover/focus state definition
- [ ] Loading state handling

### ‚ôø Accessibility
- [ ] Appropriate color contrast
- [ ] Keyboard navigation support
- [ ] Screen reader compatibility
- [ ] Meaningful aria-label provision

## üé® Modern Layout Patterns

### Bento Box Layout
```vue
<template>
  <v-container fluid>
    <div class="bento-grid">
      <!-- Large card (2x2) -->
      <v-card class="bento-item bento-large">
        <v-img 
          src="/hero-image.jpg" 
          height="100%"
          gradient="to bottom, rgba(0,0,0,.1), rgba(0,0,0,.5)"
        >
          <v-card-title class="white--text">
            Today's Recommended Menu
          </v-card-title>
        </v-img>
      </v-card>
      
      <!-- Medium cards -->
      <v-card class="bento-item bento-medium">
        <v-card-text>
          <div class="text-h3 font-weight-bold primary--text">24</div>
          <div class="text-subtitle-1">Orders in Progress</div>
        </v-card-text>
      </v-card>
      
      <!-- Small cards -->
      <v-card 
        v-for="stat in quickStats" 
        :key="stat.id"
        class="bento-item bento-small"
      >
        <v-card-text>
          <v-icon :color="stat.color">{{ stat.icon }}</v-icon>
          <div class="text-h6">{{ stat.value }}</div>
          <div class="text-caption">{{ stat.label }}</div>
        </v-card-text>
      </v-card>
    </div>
  </v-container>
</template>

<style scoped>
.bento-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;
  grid-auto-rows: 120px;
}

.bento-large {
  grid-column: span 2;
  grid-row: span 2;
}

.bento-medium {
  grid-column: span 2;
}

.bento-small {
  grid-column: span 1;
}

@media (max-width: 960px) {
  .bento-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}
</style>
```

### Glassmorphism Card
```vue
<template>
  <v-card class="glass-card">
    <v-card-title>
      <v-icon left>mdi-shimmer</v-icon>
      Premium Membership
    </v-card-title>
    <v-card-text>
      <div class="glass-content">
        <v-icon size="64" color="primary">mdi-crown</v-icon>
        <h3>VIP Benefits</h3>
        <ul>
          <li>Free Shipping</li>
          <li>10% Additional Discount</li>
          <li>Priority Booking</li>
        </ul>
      </div>
    </v-card-text>
  </v-card>
</template>

<style scoped>
.glass-card {
  background: rgba(255, 255, 255, 0.1) !important;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.glass-content {
  text-align: center;
  padding: 20px;
}
</style>
```

### Neumorphism Components
```vue
<template>
  <div class="neumorphic-container">
    <div class="neumorphic-card">
      <v-icon size="48" color="primary">mdi-package-variant</v-icon>
      <h3>Total Products</h3>
      <p class="text-h4">1,234</p>
    </div>
    
    <button class="neumorphic-button">
      <v-icon left>mdi-plus</v-icon>
      Add
    </button>
  </div>
</template>

<style scoped>
.neumorphic-container {
  background: #e0e5ec;
  padding: 40px;
  border-radius: 20px;
}

.neumorphic-card {
  background: #e0e5ec;
  border-radius: 20px;
  padding: 30px;
  box-shadow: 
    9px 9px 16px #a3b1c6, 
    -9px -9px 16px #ffffff;
  text-align: center;
}

.neumorphic-button {
  background: #e0e5ec;
  border: none;
  border-radius: 12px;
  padding: 12px 24px;
  box-shadow: 
    6px 6px 12px #a3b1c6, 
    -6px -6px 12px #ffffff;
  cursor: pointer;
  transition: all 0.3s;
}

.neumorphic-button:active {
  box-shadow: 
    inset 6px 6px 12px #a3b1c6, 
    inset -6px -6px 12px #ffffff;
}
</style>
```

## üéØ Icon System

### Domain-specific Icon Sets
```javascript
// config/icons.config.js
export const domainIcons = {
  // Food delivery
  restaurant: 'mdi-silverware-fork-knife',
  delivery: 'mdi-moped',
  order: 'mdi-receipt',
  
  // E-commerce
  cart: 'mdi-cart',
  product: 'mdi-package-variant',
  payment: 'mdi-credit-card',
  
  // Analytics
  analytics: 'mdi-chart-line',
  report: 'mdi-file-chart',
  dashboard: 'mdi-view-dashboard',
  
  // Users
  customer: 'mdi-account',
  admin: 'mdi-shield-account',
  support: 'mdi-headset'
}
```

### Animated Icons
```vue
<template>
  <!-- CSS animation -->
  <v-icon 
    class="animated-icon"
    :class="{ 'pulse': hasNewOrder }"
  >
    mdi-bell
  </v-icon>
  
  <!-- Rotation animation -->
  <v-icon 
    class="rotating-icon"
    v-if="loading"
  >
    mdi-loading
  </v-icon>
</template>

<style>
@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.2); }
  100% { transform: scale(1); }
}

.animated-icon.pulse {
  animation: pulse 0.5s ease-in-out infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.rotating-icon {
  animation: rotate 1s linear infinite;
}
</style>
```

## üé≠ Advanced UX Patterns

### Skeleton Loader
```vue
<template>
  <v-container>
    <!-- Loading state -->
    <template v-if="loading">
      <v-skeleton-loader
        v-for="i in 3"
        :key="i"
        type="card"
        class="mb-4"
      />
    </template>
    
    <!-- Actual content -->
    <template v-else>
      <ProductCard 
        v-for="product in products" 
        :key="product.id"
        :product="product"
      />
    </template>
  </v-container>
</template>
```

### Intersection Observer (Infinite Scroll)
```vue
<template>
  <v-container>
    <v-row>
      <v-col 
        v-for="item in items" 
        :key="item.id"
        cols="12" md="4"
      >
        <ItemCard :item="item" />
      </v-col>
    </v-row>
    
    <!-- Infinite scroll trigger -->
    <div ref="trigger" class="trigger-element" />
  </v-container>
</template>

<script setup>
import { useIntersectionObserver } from '@vueuse/core'

const trigger = ref(null)
const { stop } = useIntersectionObserver(
  trigger,
  ([{ isIntersecting }]) => {
    if (isIntersecting && !loading.value) {
      loadMore()
    }
  }
)
</script>
```

### Transition Effects
```vue
<template>
  <!-- List transition -->
  <transition-group name="list" tag="div" class="row">
    <v-col 
      v-for="item in filteredItems" 
      :key="item.id"
      cols="12" md="3"
    >
      <v-card>{{ item.name }}</v-card>
    </v-col>
  </transition-group>
  
  <!-- Page transition -->
  <router-view v-slot="{ Component }">
    <transition name="fade" mode="out-in">
      <component :is="Component" />
    </transition>
  </router-view>
</template>

<style>
/* List animation */
.list-enter-active,
.list-leave-active {
  transition: all 0.5s ease;
}

.list-enter-from {
  opacity: 0;
  transform: translateY(30px);
}

.list-leave-to {
  opacity: 0;
  transform: translateY(-30px);
}

/* Fade animation */
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
</style>
```

Following this design system will help you build consistent and professional user interfaces.
