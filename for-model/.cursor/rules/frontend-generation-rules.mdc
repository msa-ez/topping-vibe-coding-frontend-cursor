---

description: Defines efficient creation and development sequence for React + TypeScript + Vite based Frontend projects. Provides guidelines to minimize errors and develop step-by-step validation.
globs: Frontend-PRD.txt
alwaysApply: false
---

## Frontend Project Creation Prerequisites
When configuring frontend based on BoundedContext PRD, the following requirements must be followed:

1. Frontend Folder Creation: A `frontend` folder must be created first before creating any frontend-related files.
2. BC Integration Structure: All BoundedContext (order, delivery, product, ui) frontend files must be organized under a single `frontend` folder.
3. Structure Compliance: Must follow the integrated frontend structure defined in `@frontend-package-structure`.
4. UI Compliance: Must follow the files that should be generated for each event storming sticker defined in `@frontend-sticker-based-generation.mdc`.
5. **Gateway Integration**: When a gateway service exists in the root directory, must configure gateway routing to serve frontend through port 8088.

## Project Development Sequence Guidelines
Frontend folder creation → Frontend subfolder structure creation → React + Vite configuration files → Gateway routing configuration (if gateway exists) → Metadata-based React component structure files → Main page creation → Material-UI setup → Backend API endpoint and axios endpoint alignment verification and correction → Router setup (React Router) → Node.js 20+ version setup → npm package installation → Frontend execution and error fixes during runtime

## Project Creation Requirements
1. Do not reference existing files in the Root directory when creating projects. Files should be created based only on the folder structure defined in metadata.
2. Package structure must be created based on `@frontend-package-structure`.
3. Technical requirements, frameworks, and architecture for project configuration must be created based on `@frontend-technical-stack`.
4. All files must be created based on metadata and should not be generated based on data not included in metadata.
5. After all file creation is complete, fix errors in configured files, then proceed with npm package installation and execution.

## React + TypeScript Project Creation Detailed Guide

### Step 1: Basic Project Structure Creation
```bash
# Execute from project root
mkdir frontend
cd frontend

# Initialize Vite + React + TypeScript project and install packages
# Refer to @frontend-technical-stack for detailed package list and versions
npm create vite@latest . -- --template react-ts
```

### Step 2: TypeScript Configuration Optimization
Refer to `@frontend-technical-stack` for detailed TypeScript configuration.

### Step 3: Vite Configuration Optimization
Refer to `@frontend-technical-stack` for detailed Vite configuration.

### Step 4: Material-UI Theme Setup
Refer to `@frontend-technical-stack` for detailed Material-UI theme configuration.

### Step 5: Router Setup
Refer to `@frontend-technical-stack` for detailed React Router configuration and App.tsx setup.

### Step 6: Environment Variables Setup
```env
# .env file creation
VITE_API_BASE_URL=http://localhost:8088
VITE_APP_TITLE=OrderPage
```

### Step 7: Backend API Endpoint and Axios Endpoint Alignment Verification and Correction

Before setting up routing, verify and align backend API endpoints with frontend axios configuration to ensure proper communication.

#### 7.1 OpenAPI Specification Review
```bash
# Check for OpenAPI specification files
find .. -name "openapi.yaml" -o -name "openapi.yml" -o -name "swagger.yaml"
```

#### 7.2 Gateway Configuration Verification
```bash
# Verify gateway service configuration
find .. -name "application.yml" -o -name "application.yaml" | xargs grep -l "gateway"
```

#### 7.3 API Endpoint Verification
Review the following files to ensure endpoint consistency:
- Backend: `openapi.yaml` or Swagger documentation
- Frontend: API service files and axios configuration

#### 7.4 Axios Client Configuration Update
Refer to `@frontend-technical-stack` for detailed Axios client configuration. Ensure the baseURL is set to Gateway URL without `/api` prefix:
```typescript
// Key Gateway Configuration
baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8088', // No /api prefix
```

#### 7.5 Service-Specific API Configuration
```typescript
// src/services/[boundedContext]/[aggregate].service.ts
import apiClient from '../api/client';
import type { [Aggregate] } from '@/types/[boundedContext]/[aggregate].types';

export class [Aggregate]Service {
  private readonly basePath = '/[aggregates.namePlural]'; // e.g., '/orders', '/deliveries'

  // GET /{aggregates.namePlural} - List all aggregates
  async getAll(): Promise<[Aggregate][]> {
    const response = await apiClient.get(this.basePath);
    return response.data;
  }

  // GET /{aggregates.namePlural}/{id} - Get aggregate by ID
  async getById(id: string): Promise<[Aggregate]> {
    const response = await apiClient.get(`${this.basePath}/${id}`);
    return response.data;
  }

  // POST /{aggregates.namePlural} - Create new aggregate
  async create(data: Partial<[Aggregate]>): Promise<[Aggregate]> {
    const response = await apiClient.post(this.basePath, data);
    return response.data;
  }

  // PUT /{aggregates.namePlural}/{id} - Update aggregate
  async update(id: string, data: Partial<[Aggregate]>): Promise<[Aggregate]> {
    const response = await apiClient.put(`${this.basePath}/${id}`, data);
    return response.data;
  }

  // DELETE /{aggregates.namePlural}/{id} - Delete aggregate
  async delete(id: string): Promise<void> {
    await apiClient.delete(`${this.basePath}/${id}`);
  }

  // Custom command endpoints (for commands where isRestRepository: false)
  async executeCommand(id: string, command: string, data?: any): Promise<any> {
    const response = await apiClient.post(`${this.basePath}/${id}/${command}`, data);
    return response.data;
  }
}

export const [aggregate]Service = new [Aggregate]Service();
```

#### 7.6 Environment Variables Verification
```env
# .env - Verify these match backend configuration
VITE_API_BASE_URL=http://localhost:8088
VITE_GATEWAY_URL=http://localhost:8088

# .env.development - Development mode (through gateway)
VITE_API_BASE_URL=http://localhost:8088
VITE_GATEWAY_URL=http://localhost:8088

# .env.production - Production mode (through gateway)
VITE_API_BASE_URL=http://localhost:8088
VITE_GATEWAY_URL=http://localhost:8088
```

#### 7.7 API Endpoint Testing Utility
```typescript
// src/utils/api-test.ts - Utility for testing API connectivity
import apiClient from '@/services/api/client';

export const testApiConnectivity = async () => {
  try {
    // Test gateway connectivity
    const healthResponse = await apiClient.get('/health');
    console.log('✅ Gateway connectivity successful:', healthResponse.status);
    
    // Test each bounded context endpoint through gateway (using namePlural)
    const contexts = ['orders', 'deliveries', 'products']; // Based on your metadata namePlural
    
    for (const context of contexts) {
      try {
        const response = await apiClient.get(`/${context}`);
        console.log(`✅ ${context} endpoint accessible through gateway:`, response.status);
      } catch (error) {
        console.warn(`⚠️ ${context} endpoint issue through gateway:`, error.message);
      }
    }
  } catch (error) {
    console.error('❌ Gateway connectivity failed:', error.message);
    throw new Error('Gateway API is not accessible on port 8088');
  }
};

// Call this during app initialization
export const initializeApiCheck = () => {
  if (import.meta.env.DEV) {
    testApiConnectivity().catch(console.error);
  }
};
```

#### 7.8 CORS Configuration Verification
Ensure the backend services have proper CORS configuration:
```yaml
# Backend application.yml - CORS configuration
spring:
  web:
    cors:
      allowed-origins: 
        - "http://localhost:3000"
        - "http://localhost:8088"
      allowed-methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowed-headers: "*"
      allow-credentials: true
```

#### 7.9 API Documentation Integration
```typescript
// src/utils/api-docs.ts - OpenAPI specification integration
export const generateApiClient = async () => {
  // If using openapi-typescript-codegen or similar
  const spec = await fetch('/openapi.yaml').then(r => r.text());
  console.log('OpenAPI spec loaded:', spec);
  
  // Generate TypeScript types from OpenAPI spec
  // This step can be automated in build process
};
```

#### 7.10 Endpoint Validation Checklist
- [ ] Gateway service is running on port 8088
- [ ] OpenAPI specification matches actual backend endpoints
- [ ] Axios base URL is configured to use gateway (http://localhost:8088)
- [ ] Gateway CORS configuration allows frontend origin
- [ ] Authentication headers are properly configured
- [ ] Error handling covers common HTTP status codes
- [ ] Environment variables use gateway URL for all stages

### Step 8: Gateway Routing Configuration (If Gateway Exists)
When a gateway service exists in the root directory, configure the gateway to serve the frontend application through port 8088.

#### Check for Gateway Service
```bash
# Check if gateway service exists in root directory
ls ../gateway* || ls ../*/gateway* || ls ../**/application.yml | grep -l "gateway"
```

#### Gateway application.yml Configuration
If a gateway service is found, add the following frontend routing configuration to the gateway's `application.yml`:

```yaml
# Gateway application.yml - Add to spring.cloud.gateway.routes
spring:
  cloud:
    gateway:
      routes:
        # Frontend Static Resources Route
        - id: frontend-static
          uri: http://localhost:3000
          predicates:
            - Path=/**, /static/**, /assets/**
          filters:
            - RewritePath=/(?<segment>.*), /$\{segment}
        
        # API Routes for BoundedContexts (direct namePlural routing)
        - id: backend-api
          uri: lb://BACKEND-SERVICE
          predicates:
            - Path=/orders/**, /deliveries/**, /products/**
          filters:
            - RewritePath=/(?<segment>.*), /$\{segment}
            
        # Default Frontend Route (SPA Support)
        - id: frontend-spa
          uri: http://localhost:3000
          predicates:
            - Path=/**
          filters:
            - RewritePath=/(?<segment>.*), /
      
      # Global CORS Configuration for Frontend
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: 
              - "http://localhost:3000"
              - "http://localhost:8088"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true

# Server Configuration
server:
  port: 8088
```

#### Vite Configuration for Gateway Integration
Update the frontend `vite.config.ts` to proxy API requests to Gateway. Refer to `@frontend-technical-stack` for base configuration and add the following proxy settings:

```typescript
// Add to vite.config.ts server.proxy configuration
server: {
  proxy: {
    // Proxy API requests to gateway (direct namePlural routing)
    '/orders': { target: 'http://localhost:8088', changeOrigin: true },
    '/deliveries': { target: 'http://localhost:8088', changeOrigin: true },
    '/products': { target: 'http://localhost:8088', changeOrigin: true },
  }
}
```

#### Frontend Development vs Production Configuration
```env
# .env.development - Development mode (through gateway)
VITE_API_BASE_URL=http://localhost:8088
VITE_GATEWAY_URL=http://localhost:8088

# .env.production - Production mode (through gateway)
VITE_API_BASE_URL=http://localhost:8088
VITE_GATEWAY_URL=http://localhost:8088
```

### Step 9: Package Scripts Optimization
Refer to `@frontend-technical-stack` for detailed package.json configuration and scripts.

## Metadata-Based Component Creation Rules

### Aggregate-Based Component Creation
1. **Page Component**: `[AggregateRoot]Page.tsx`
2. **Form Component**: `[AggregateRoot]Form.tsx`
3. **Table Component**: `[AggregateRoot]Table.tsx`
4. **Card Component**: `[AggregateRoot]Card.tsx`

### Command-Based Component Creation
1. **Command Button Component**: `[Command]Button.tsx`
2. **Command Modal Component**: `[Command]Modal.tsx`

### ReadModel-Based Component Creation
1. **Search Component**: `[ReadModel]Search.tsx`
2. **Dashboard Component**: `[ReadModel]Dashboard.tsx`

## Error Prevention Checklist

### Pre-Installation Checks
- [ ] Verify Node.js 20.x or higher installation
- [ ] Update npm to latest version
- [ ] Delete existing node_modules folder (if any)

### Development Environment Setup
- [ ] Complete TypeScript configuration
- [ ] Set up ESLint + Prettier
- [ ] Configure Material-UI theme
- [ ] Set up React Router
- [ ] Configure API client

### Backend API Endpoint Alignment Verification
- [ ] Review OpenAPI specification files
- [ ] Verify gateway configuration and routing
- [ ] Ensure axios base URL uses gateway (http://localhost:8088)
- [ ] Test API connectivity through gateway
- [ ] Validate gateway CORS configuration
- [ ] Configure authentication headers properly
- [ ] Set up error handling for HTTP status codes
- [ ] Verify environment variables use gateway URL for all stages

### Gateway Integration (If Gateway Exists)
- [ ] Check for gateway service in root directory
- [ ] Configure gateway application.yml with frontend routes
- [ ] Set up CORS configuration for port 8088
- [ ] Update Vite config for gateway proxy
- [ ] Configure environment variables for gateway access

### Component Creation Rules
- [ ] Follow metadata-based component structure
- [ ] Complete TypeScript type definitions
- [ ] Use Material-UI components
- [ ] Apply responsive design
- [ ] Follow accessibility guidelines

### Build and Runtime Verification
- [ ] Pass type checking (`npm run type-check`)
- [ ] Pass lint checking (`npm run lint`)
- [ ] Development server runs normally (`npm run dev`)
- [ ] Production build successful (`npm run build`)

### Gateway Access Verification (If Gateway Configured)
- [ ] Gateway service running on port 8088
- [ ] Frontend accessible through `http://localhost:8088`
- [ ] API requests properly proxied through gateway
- [ ] CORS policy working correctly
- [ ] Static assets served through gateway