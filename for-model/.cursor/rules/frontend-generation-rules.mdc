---

description: Defines efficient creation and development sequence for React + TypeScript + Vite based Frontend projects. Provides guidelines to minimize errors and develop step-by-step validation.
globs: Frontend-PRD.txt
alwaysApply: false
---

## Frontend Project Creation Prerequisites
When configuring frontend based on BoundedContext PRD, the following requirements must be followed:

1. Frontend Folder Creation: A `frontend` folder must be created first before creating any frontend-related files.
2. BC Integration Structure: All BoundedContext (order, delivery, product, ui) frontend files must be organized under a single `frontend` folder.
3. Structure Compliance: Must follow the integrated frontend structure defined in `@frontend-package-structure`.
4. UI Compliance: Must follow the files that should be generated for each event storming sticker defined in `@frontend-sticker-based-generation.mdc`.

## Project Development Sequence Guidelines
Frontend folder creation → Frontend subfolder structure creation → React + Vite configuration files → Metadata-based React component structure files → Main page creation → Material-UI setup → Router setup (React Router) → Node.js 20+ version setup → npm package installation → Frontend execution and error fixes during runtime

## Project Creation Requirements
1. Do not reference existing files in the Root directory when creating projects. Files should be created based only on the folder structure defined in metadata.
2. Package structure must be created based on `@frontend-package-structure`.
3. Technical requirements, frameworks, and architecture for project configuration must be created based on `@frontend-technical-stack`.
4. All files must be created based on metadata and should not be generated based on data not included in metadata.
5. After all file creation is complete, fix errors in configured files, then proceed with npm package installation and execution.

## React + TypeScript Project Creation Detailed Guide

### Step 1: Basic Project Structure Creation
```bash
# Execute from project root
mkdir frontend
cd frontend

# Initialize Vite + React + TypeScript project
npm create vite@latest . -- --template react-ts

# Install additional required packages
npm install @mui/material @emotion/react @emotion/styled
npm install @mui/icons-material
npm install react-router-dom
npm install @types/react-router-dom
npm install axios
npm install @tanstack/react-query
npm install framer-motion
```

### Step 2: TypeScript Configuration Optimization
```json
// tsconfig.json update
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@/components/*": ["src/components/*"],
      "@/services/*": ["src/services/*"],
      "@/types/*": ["src/types/*"],
      "@/hooks/*": ["src/hooks/*"],
      "@/utils/*": ["src/utils/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
```

### Step 3: Vite Configuration Optimization
```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    port: 3000,
    host: true,
    open: true,
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          mui: ['@mui/material', '@mui/icons-material'],
          router: ['react-router-dom'],
        },
      },
    },
  },
})
```

### Step 4: Material-UI Theme Setup
```typescript
// src/theme/index.ts creation
import { createTheme } from '@mui/material/styles';

export const lightTheme = createTheme({
  palette: {
    mode: 'light',
    primary: {
      main: '#2196f3',
    },
    secondary: {
      main: '#f50057',
    },
  },
  typography: {
    fontFamily: 'Pretendard, -apple-system, BlinkMacSystemFont, system-ui, Roboto, sans-serif',
  },
});

export const darkTheme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#90caf9',
    },
    secondary: {
      main: '#f48fb1',
    },
  },
  typography: {
    fontFamily: 'Pretendard, -apple-system, BlinkMacSystemFont, system-ui, Roboto, sans-serif',
  },
});
```

### Step 5: Router Setup
```typescript
// src/App.tsx update
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { ThemeProvider } from '@mui/material/styles';
import { CssBaseline } from '@mui/material';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { lightTheme } from './theme';

// Pages
import HomePage from './pages/HomePage';
import OrderPage from './pages/order/OrderPage';
import CustomerCenterPage from './pages/customercenter/CustomerCenterPage';

const queryClient = new QueryClient();

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider theme={lightTheme}>
        <CssBaseline />
        <Router>
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/orders" element={<OrderPage />} />
            <Route path="/customercenter" element={<CustomerCenterPage />} />
          </Routes>
        </Router>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;
```

### Step 6: Environment Variables Setup
```env
# .env file creation
VITE_API_BASE_URL=http://localhost:8080/api
VITE_APP_TITLE=OrderPage
```

### Step 7: Package Scripts Optimization
```json
// package.json scripts section
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --ext ts,tsx --fix",
    "preview": "vite preview",
    "type-check": "tsc --noEmit",
    "test": "vitest",
    "test:ui": "vitest --ui"
  }
}
```

## Metadata-Based Component Creation Rules

### Aggregate-Based Component Creation
1. **Page Component**: `[AggregateRoot]Page.tsx`
2. **Form Component**: `[AggregateRoot]Form.tsx`
3. **Table Component**: `[AggregateRoot]Table.tsx`
4. **Card Component**: `[AggregateRoot]Card.tsx`

### Command-Based Component Creation
1. **Command Button Component**: `[Command]Button.tsx`
2. **Command Modal Component**: `[Command]Modal.tsx`

### ReadModel-Based Component Creation
1. **Search Component**: `[ReadModel]Search.tsx`
2. **Dashboard Component**: `[ReadModel]Dashboard.tsx`

## Error Prevention Checklist

### Pre-Installation Checks
- [ ] Verify Node.js 20.x or higher installation
- [ ] Update npm to latest version
- [ ] Delete existing node_modules folder (if any)

### Development Environment Setup
- [ ] Complete TypeScript configuration
- [ ] Set up ESLint + Prettier
- [ ] Configure Material-UI theme
- [ ] Set up React Router
- [ ] Configure API client

### Component Creation Rules
- [ ] Follow metadata-based component structure
- [ ] Complete TypeScript type definitions
- [ ] Use Material-UI components
- [ ] Apply responsive design
- [ ] Follow accessibility guidelines

### Build and Runtime Verification
- [ ] Pass type checking (`npm run type-check`)
- [ ] Pass lint checking (`npm run lint`)
- [ ] Development server runs normally (`npm run dev`)
- [ ] Production build successful (`npm run build`)