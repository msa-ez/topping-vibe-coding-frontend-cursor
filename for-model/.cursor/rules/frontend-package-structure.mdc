---

description: Defines the standard folder structure for React + TypeScript + Vite projects. Provides an extensible and maintainable project structure.
alwaysApply: false
---

React + TypeScript Frontend Project Structure Requirements

Please create files following the structure and file descriptions below according to the provided metadata.
BoundedContext-specific frontend based on PRD is integrated under a single frontend folder.

```
/frontend                  # Integrated frontend project (React + Vite + TypeScript)
  /public
    /favicon.ico          # Favicon
    /logo192.png         # App logo
    /manifest.json       # PWA configuration
  /src
    /components
      /common             # Global common components
        /Layout.tsx       # Common layout component
        /Navigation.tsx   # Navigation component
        /Toast.tsx        # Global toast notification
        /ErrorBoundary.tsx # Error boundary
        /Loading.tsx      # Loading component
      /[BoundedContext]   # BC-specific event storming sticker-based structure
        /[Aggregate]Page.tsx        # Aggregate CRUD main page
        /[Aggregate]Form.tsx        # Create/update form
        /[Aggregate]Table.tsx       # Data table
        /[Aggregate]Card.tsx        # Card component
        /[VO]Component.tsx          # Value Object component (created only when VO info exists in aggregateRoot.entities.relations)
        /[Enum]Component.tsx        # Enum component (created only when Enum info exists in aggregateRoot.entities.relations)
        /[Entity]Component.tsx      # Entity component (created only when Entity info exists in aggregateRoot.entities.relations)
        /[Command]Button.tsx        # Command button component
        /[Command]Modal.tsx         # Command modal component (created only when commands.isRestRepository is false)
        /search            # Query for Aggregate-based search (created when Metadata views.queryparameters exist)
          /[ReadModel]Search.tsx # Search bar UI implementation
        /dashboard         # CQRS-based dashboard (created when Metadata views.fieldDescriptors exist)
          /[ReadModel]Dashboard.tsx # Dashboard dedicated page
    /pages                # Page components (React Router based)
      /HomePage.tsx       # Main home page (including BC navigation)
      /[BoundedContext]   # BC-specific pages
        /[BoundedContext]Page.tsx # BC dashboard page
        /[aggregate]
          /[Aggregate]Page.tsx  # Aggregate page
        /[views]
          /[ReadModel]Page.tsx  # ReadModel dashboard page
    /hooks                # Custom React hooks
      /useApi.ts          # API call hook
      /useAuth.ts         # Authentication related hook
      /useLocalStorage.ts # Local storage hook
      /[BoundedContext]   # BC-specific hooks
        /use[Aggregate].ts # Aggregate related hook
    /services             # API and business logic
      /api
        /client.ts        # Axios client basic configuration
        /interceptors.ts  # API interceptors
        /types.ts         # API related types
      /[BoundedContext]   # BC-specific API services
        /[aggregate].service.ts # BC Aggregate related API service
        /[command].service.ts   # Command related API service
        /[query].service.ts     # Query related API service
    /store                # State management (Zustand or Context API)
      /index.ts           # Store root
      /auth.store.ts      # Authentication state
      /[BoundedContext]   # BC-specific store
        /[aggregate].store.ts # BC Aggregate related state management
    /types                # TypeScript type definitions
      /common.types.ts    # Common type definitions
      /api.types.ts       # API related types
      /[BoundedContext]   # BC-specific type definitions
        /[aggregate].types.ts # BC Aggregate related TypeScript type definitions
        /[command].types.ts   # Command related types
        /[query].types.ts     # Query related types
    /utils                # Utility functions
      /constants.ts       # Constant definitions
      /formatters.ts      # Data formatters
      /validators.ts      # Validation
      /helpers.ts         # Helper functions
    /theme                # Material-UI theme configuration
      /index.ts           # Main theme configuration
      /palette.ts         # Color palette
      /typography.ts      # Typography configuration
      /components.ts      # Component-specific theme overrides
    /App.tsx              # Root App component
    /main.tsx             # Vite entry point
    /index.css            # Global styles
    /vite-env.d.ts        # Vite type definitions
  package.json            # NPM package configuration
  vite.config.ts          # Vite build tool configuration
  tsconfig.json           # TypeScript configuration
  tsconfig.node.json      # Node.js TypeScript configuration
  .eslintrc.cjs           # ESLint configuration
  .prettierrc             # Prettier configuration
  .env                    # Environment variables
  .env.example            # Environment variable examples
  .gitignore              # Git ignore file
  README.md               # Project documentation
  ```

## Detailed Folder Structure Description

### `/src/components` - Components Directory
- **`/common`**: Globally used common components
- **`/[BoundedContext]`**: Domain-specific component grouping
- **Naming Convention**: Use PascalCase, clearly express functionality

### `/src/pages` - Page Components
- Page-level components integrated with **React Router**
- **`/[BoundedContext]`**: Domain-specific page structure
- **Routing Structure**: `/boundedcontext/aggregate` format

### `/src/hooks` - Custom Hooks
- Use **`use`** prefix
- **Business Logic Separation**: Separate logic from components
- **Reusability**: Common use across multiple components

### `/src/services` - Service Layer
- **API Communication**: Axios-based HTTP client
- **Business Logic**: Domain-specific service separation
- **Error Handling**: Centralized error handling

### `/src/store` - State Management
- **Global State**: Using Zustand or Context API
- **Domain Separation**: BC-specific state management
- **Type Safety**: Full TypeScript support

### `/src/types` - Type Definitions
- **Domain-specific Types**: Separate types by BC
- **API Types**: Server response type definitions
- **Component Props**: Interface definitions

### `/src/theme` - Theme Configuration
- **Material-UI Theme**: Centralized theme management
- **Dark/Light Mode**: Theme switching support
- **Component Override**: Default style customization

## File Naming Conventions

### Component Files
- **React Components**: `ComponentName.tsx`
- **Page Components**: `PageName.tsx`
- **Hooks**: `useHookName.ts`

### Service Files
- **API Services**: `service-name.service.ts`
- **Type Definitions**: `entity.types.ts`
- **Store**: `entity.store.ts`

### Configuration Files
- **Vite Configuration**: `vite.config.ts`
- **TypeScript Configuration**: `tsconfig.json`
- **Environment Variables**: `.env`

## Metadata-Based File Creation Rules

### Aggregate-Based Creation
1. **Page**: `[AggregateRoot]Page.tsx`
2. **Form**: `[AggregateRoot]Form.tsx`
3. **Table**: `[AggregateRoot]Table.tsx`
4. **Service**: `[aggregate].service.ts`
5. **Types**: `[aggregate].types.ts`
6. **Store**: `[aggregate].store.ts`

### Command-Based Creation 
1. **Button**: `[Command]Button.tsx`
2. **Modal**: `[Command]Modal.tsx`
3. **Service**: `[command].service.ts`
4. **Types**: `[command].types.ts`

### View-Based Creation
1. **Search**: `[ReadModel]Search.tsx`
2. **Dashboard**: `[ReadModel]Dashboard.tsx`
3. **Service**: `[query].service.ts`
4. **Types**: `[query].types.ts`

## React Router Routing Structure

```typescript
// Routing examples
/                           # HomePage
/order                      # OrderPage (BC dashboard)
/order/orders               # Order Aggregate page
/order/orderhistory         # OrderHistory ReadModel page
/customercenter             # CustomerCenterPage (BC dashboard)
/customercenter/mypage      # MyPage ReadModel page
```

Following this structure will help you build an extensible and maintainable React + TypeScript project.