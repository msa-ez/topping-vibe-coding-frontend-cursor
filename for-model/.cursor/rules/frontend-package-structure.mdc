---
description: Defines metadata-based dynamic component structure for React + TypeScript projects. Focuses on DDD Event Storming sticker-based file generation beyond basic project setup.
alwaysApply: false
---


# Metadata-Based Dynamic Component Structure

This rule defines the structure of dynamic components that are added based on metadata, when the basic project structure has already been created.

**Prerequisites**: The basic frontend folder structure has already been created through `frontend-setup-prd.md`.

For detailed implementation of each component type, refer to:
- **Technology Stack**: `@frontend-technical-stack`
- **Component Generation**: `@frontend-sticker-based-generation-rules`  
- **Design System**: `@frontend-design-system`
- **Development Process**: `@frontend-generation-rules`
- **UI Examples**: `@frontend-ui-requirements`

## Metadata-Based Dynamic Components Structure

```
/src/components/[BoundedContext]/   # Dynamic component folder by BC
  # Aggregate-based components
  /[Aggregate]Page.tsx              # Aggregate CRUD main page
  /[Aggregate]Form.tsx              # Create/Update form
  /[Aggregate]Table.tsx             # Data table
  /[Aggregate]Card.tsx              # Card component
  
  # Entity/VO/Enum based components (generated only when exists in metadata)
  /[VO]Component.tsx                # Value Object component
  /[Enum]Component.tsx              # Enum component  
  /[Entity]Component.tsx            # Entity component
  
  # Command-based components (generated only when commands.isRestRepository is false)
  /[Command]Button.tsx              # Command button component
  /[Command]Modal.tsx               # Command modal component
  
  # Query/ReadModel based components (generated based on metadata conditions)
  /search/                          # Generated when views.queryparameters exist
    /[ReadModel]Search.tsx          # Search bar UI implementation
  /dashboard/                       # Generated when views.fieldDescriptors exist  
    /[ReadModel]Dashboard.tsx       # Dashboard dedicated page

/src/pages/[BoundedContext]/        # Page components by BC
  /[BoundedContext]Page.tsx         # BC dashboard page
  /[aggregate]/                     # Page folder by Aggregate
    /[Aggregate]Page.tsx            # Aggregate page
  /[views]/                         # Page folder by ReadModel
    /[ReadModel]Page.tsx            # ReadModel dashboard page

/src/hooks/[BoundedContext]/        # Custom hooks by BC
  /use[Aggregate].ts                # Aggregate related hooks
  /use[Command].ts                  # Command related hooks  
  /use[ReadModel].ts                # ReadModel related hooks

/src/services/[BoundedContext]/     # API services by BC
  /[aggregate].service.ts           # Aggregate related API service
  /[command].service.ts             # Command related API service
  /[query].service.ts               # Query related API service

/src/store/[BoundedContext]/        # State management by BC
  /[aggregate].store.ts             # Aggregate related state management
  /[command].store.ts               # Command related state
  /[query].store.ts                 # Query related state

/src/types/[BoundedContext]/        # Type definitions by BC
  /[aggregate].types.ts             # Aggregate related TypeScript types
  /[command].types.ts               # Command related types
  /[query].types.ts                 # Query related types
```

## Metadata-Based File Generation Guidelines

### Component Generation Rules
- **BoundedContext-based**: Create separate folder structure for each BC
- **Aggregate-based**: Generate CRUD component sets
- **Command-based**: Generate business logic components (only when isRestRepository: false)
- **ReadModel-based**: Generate query-only components (conditional)

### File Naming Conventions
- **Components**: `[MetadataName]ComponentType.tsx` (e.g., OrderPage.tsx, CreateOrderButton.tsx)
- **Services**: `[metadataname].service.ts` (e.g., order.service.ts)
- **Types**: `[metadataname].types.ts` (e.g., order.types.ts)
- **Store**: `[metadataname].store.ts` (e.g., order.store.ts)
- **Hooks**: `use[MetadataName].ts` (e.g., useOrder.ts)

## Metadata-Based File Creation Rules

### Aggregate-based Generation (aggregates metadata)
1. **Page**: `[AggregateRoot]Page.tsx` - CRUD interface
2. **Form**: `[AggregateRoot]Form.tsx` - Create/Update form
3. **Table**: `[AggregateRoot]Table.tsx` - Data table
4. **Card**: `[AggregateRoot]Card.tsx` - Card view
5. **Service**: `[aggregate].service.ts` - API service
6. **Types**: `[aggregate].types.ts` - TypeScript types
7. **Store**: `[aggregate].store.ts` - State management
8. **Hook**: `use[Aggregate].ts` - Custom hook

### Command-based Generation (commands metadata, only when isRestRepository: false)
1. **Button**: `[Command]Button.tsx` - Command execution button
2. **Modal**: `[Command]Modal.tsx` - Command execution modal
3. **Service**: `[command].service.ts` - Command API
4. **Types**: `[command].types.ts` - Command types
5. **Hook**: `use[Command].ts` - Command hook

### ReadModel/View-based Generation (views metadata)
**Search Components** (when views.queryparameters exist):
1. **Search**: `[ReadModel]Search.tsx` - Search interface
2. **Service**: `[query].service.ts` - Search API

**Dashboard Components** (when views.fieldDescriptors exist):
1. **Dashboard**: `[ReadModel]Dashboard.tsx` - Dashboard page
2. **Page**: `[ReadModel]Page.tsx` - Dedicated page
3. **Types**: `[query].types.ts` - Query types
4. **Hook**: `use[ReadModel].ts` - ReadModel hook

### Entity/VO/Enum-based Generation (when aggregateRoot.entities.relations exist)
1. **VO Component**: `[VO]Component.tsx` - Value Object component
2. **Enum Component**: `[Enum]Component.tsx` - Enum selection component
3. **Entity Component**: `[Entity]Component.tsx` - Entity display component

## React Router Structure (Metadata-based)

```typescript
// BoundedContext-based routing
/                                    # HomePage (navigation for all BCs)
/[boundedContext]                    # BC dashboard page
/[boundedContext]/[aggregatesPlural] # Aggregate page 
/[viewsPlural]                       # ReadModel dashboard page

// Examples (metadata-based)
/order                               # Order BC dashboard
/order/orders                        # Order Aggregate page
/orderhistories                      # OrderHistory ReadModel page
```

**Important**: All file generation must be based strictly on the content defined in metadata, and no arbitrary data not present in metadata should be generated.