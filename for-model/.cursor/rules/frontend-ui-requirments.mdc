---
description: This document contains React component examples for UI elements (buttons, modals, dashboards, search bars) derived from EventStorming. When building frontend, refer to these examples to implement React + Material-UI components when names match.
alwaysApply: false
---

## Cross-References
For implementation details, refer to:
- **Component Structure**: `@frontend-sticker-based-generation-rules`
- **Styling Guidelines**: `@frontend-design-system`
- **Technical Setup**: `@frontend-technical-stack`

## Implementation Guidelines
When creating components with file names matching the names below, refer to the provided React component examples and implement them based on Material-UI.

## React Component Templates
The following templates are React component examples for each Command within BoundedContext. When creating related files, they must be based on the component structure below:

**BoundedContext**: order
**name**: Modify Order

```typescript
// ModifyOrderModal.tsx
import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Typography,
  Box,
  Alert,
  CircularProgress,
} from '@mui/material';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';

interface ModifyOrderModalProps {
  open: boolean;
  onClose: () => void;
  initialAddress?: string;
  onSuccess?: (newAddress: string) => void;
}

interface FormData {
  address: string;
}

const schema = yup.object({
  address: yup.string().required('Please enter an address'),
});

const ModifyOrderModal: React.FC<ModifyOrderModalProps> = ({
  open,
  onClose,
  initialAddress = '123 Teheran-ro, Gangnam-gu, Seoul',
  onSuccess,
}) => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<{ success: boolean; message: string } | null>(null);

  const {
    control,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<FormData>({
    resolver: yupResolver(schema),
    defaultValues: {
      address: initialAddress,
    },
  });

  const onSubmit = async (data: FormData) => {
    setLoading(true);
    setResult(null);

    try {
      // Sample business logic: Success if address starts with "Seoul"
      await new Promise(resolve => setTimeout(resolve, 1200));
      
      if (data.address.startsWith('Seoul')) {
        setResult({
          success: true,
          message: 'Order modification completed!',
        });
        onSuccess?.(data.address);
      } else {
        setResult({
          success: false,
          message: 'Modification failed. Please enter a valid address.',
        });
      }
    } catch (error) {
      setResult({
        success: false,
        message: 'An error occurred. Please try again.',
      });
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    reset();
    setResult(null);
    onClose();
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
      <DialogTitle sx=\{{ textAlign: 'center', pb: 1 }}>
        <Typography variant="h5" component="h2" fontWeight={600}>
          Modify Order
        </Typography>
        <Typography variant="body2" color="text.secondary" sx=\{{ mt: 1 }}>
          Modify order information.
        </Typography>
      </DialogTitle>

      <DialogContent sx=\{{ px: 3, py: 2 }}>
        {result ? (
          <Box sx=\{{ textAlign: 'center' }}>
            <Alert 
              severity={result.success ? 'success' : 'error'} 
              sx=\{{ mb: 2 }}
            >
              {result.message}
            </Alert>
            {result.success && (
              <Typography variant="body2" color="text.secondary">
                New address: <strong>{control._formValues.address}</strong>
              </Typography>
            )}
          </Box>
        ) : (
          <Box component="form" onSubmit={handleSubmit(onSubmit)}>
            <Controller
              name="address"
              control={control}
              render={({ field }) => (
                <TextField
                  {...field}
                  label="Address"
                  placeholder="Enter address"
                  fullWidth
                  variant="outlined"
                  error={!!errors.address}
                  helperText={errors.address?.message}
                  disabled={loading}
                  sx=\{{ mb: 2 }}
                />
              )}
            />
          </Box>
        )}
      </DialogContent>

      <DialogActions sx=\{{ px: 3, pb: 3 }}>
        {result ? (
          <Button onClick={handleClose} variant="contained" fullWidth>
            OK
          </Button>
        ) : (
          <>
            <Button onClick={handleClose} disabled={loading}>
              Cancel
            </Button>
            <Button
              onClick={handleSubmit(onSubmit)}
              variant="contained"
              disabled={loading}
              startIcon={loading && <CircularProgress size={20} />}
            >
              {loading ? 'Processing...' : 'Modify'}
            </Button>
          </>
        )}
      </DialogActions>
    </Dialog>
  );
};

export default ModifyOrderModal;
```

**BoundedContext**: order
**name**: Order Search

```typescript
// OrderSearchTable.tsx
import React, { useState, useMemo } from 'react';
import {
  Card,
  CardContent,
  TextField,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Box,
  Typography,
  InputAdornment,
} from '@mui/material';
import { Search } from '@mui/icons-material';

interface Order {
  id: number;
  userId: string;
  productName: string;
  address: string;
}

interface OrderSearchTableProps {
  onOrderSelect?: (order: Order) => void;
}

const OrderSearchTable: React.FC<OrderSearchTableProps> = ({ onOrderSelect }) => {
  const [searchQuery, setSearchQuery] = useState('');

  // Sample data
  const sampleOrders: Order[] = [
    { id: 1001, userId: 'userA', productName: 'Sample Product 1', address: 'Gangnam-gu, Seoul' },
    { id: 1002, userId: 'userB', productName: 'Sample Product 2', address: 'Haeundae-gu, Busan' },
    { id: 1003, userId: 'userC', productName: 'Sample Product 3', address: 'Yuseong-gu, Daejeon' },
  ];

  // Filtered order list
  const filteredOrders = useMemo(() => {
    if (!searchQuery.trim()) {
      return sampleOrders;
    }
    return sampleOrders.filter(order =>
      order.productName.includes(searchQuery.trim())
    );
  }, [searchQuery]);

  const handleSearch = (event: React.FormEvent) => {
    event.preventDefault();
    // Search logic is automatically handled in useMemo
  };

  const handleRowClick = (order: Order) => {
    onOrderSelect?.(order);
  };

  return (
    <Card elevation={1} sx=\{{ bgcolor: '#f8f9fa' }}>
      <CardContent sx=\{{ p: 3 }}>
        {/* Search form */}
        <Box
          component="form"
          onSubmit={handleSearch}
          sx=\{{
            display: 'flex',
            alignItems: 'flex-end',
            gap: 2,
            mb: 3,
            flexWrap: 'wrap',
          }}
        >
          <TextField
            label="Product Name"
            placeholder="Enter product name"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            variant="outlined"
            size="small"
            sx=\{{ minWidth: 200 }}
            InputProps=\{{
              endAdornment: (
                <InputAdornment position="end">
                  <Search />
                </InputAdornment>
              ),
            }}
          />
          <Button
            type="submit"
            variant="contained"
            sx=\{{
              px: 3,
              py: 1,
              '&:hover': {
                bgcolor: 'primary.dark',
              },
            }}
          >
            Search
          </Button>
        </Box>

        {/* Results table */}
        <TableContainer component={Paper} sx=\{{ bgcolor: '#fff' }}>
          <Table sx=\{{ minWidth: 500 }}>
            <TableHead>
              <TableRow sx=\{{ bgcolor: '#f1f3f5' }}>
                <TableCell sx=\{{ fontWeight: 600, color: '#343a40' }}>
                  Order ID
                </TableCell>
                <TableCell sx=\{{ fontWeight: 600, color: '#343a40' }}>
                  User ID
                </TableCell>
                <TableCell sx=\{{ fontWeight: 600, color: '#343a40' }}>
                  Product Name
                </TableCell>
                <TableCell sx=\{{ fontWeight: 600, color: '#343a40' }}>
                  Address
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredOrders.length > 0 ? (
                filteredOrders.map((order) => (
                  <TableRow
                    key={order.id}
                    hover
                    onClick={() => handleRowClick(order)}
                    sx=\{{
                      cursor: 'pointer',
                      '&:hover': { bgcolor: 'action.hover' },
                    }}
                  >
                    <TableCell sx=\{{ color: '#495057' }}>{order.id}</TableCell>
                    <TableCell sx=\{{ color: '#495057' }}>{order.userId}</TableCell>
                    <TableCell sx=\{{ color: '#495057' }}>{order.productName}</TableCell>
                    <TableCell sx=\{{ color: '#495057' }}>{order.address}</TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={4} sx=\{{ textAlign: 'center', py: 3 }}>
                    <Typography variant="body1" color="text.secondary">
                      No search results found.
                    </Typography>
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </CardContent>
    </Card>
  );
};

export default OrderSearchTable;
```

**BoundedContext**: customercenter
**name**: My Page

```typescript
// MyPageDashboard.tsx
import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Box,
  Typography,
  Chip,
  CircularProgress,
} from '@mui/material';
import { Refresh } from '@mui/icons-material';
import { useQuery } from '@tanstack/react-query';

interface MyPageData {
  id: number;
  orderId: number;
  userId: string;
  productName: string;
  address: string;
}

interface MyPageDashboardProps {
  userId?: string;
}

const MyPageDashboard: React.FC<MyPageDashboardProps> = ({ userId }) => {
  // Sample data
  const sampleData: MyPageData[] = [
    { id: 1, orderId: 10001, userId: 'userA', productName: 'Laptop', address: 'Gangnam-gu, Seoul' },
    { id: 2, orderId: 10002, userId: 'userB', productName: 'Keyboard', address: 'Suwon, Gyeonggi' },
  ];

  const {
    data = sampleData,
    isLoading,
    refetch,
  } = useQuery<MyPageData[]>({
    queryKey: ['mypage', userId],
    queryFn: async () => {
      // Simulate actual API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      return sampleData;
    },
    initialData: sampleData,
  });

  const handleRefresh = () => {
    refetch();
  };

  return (
    <Card elevation={1} sx=\{{ bgcolor: '#f9fafb', minWidth: 280 }}>
      <CardContent sx=\{{ p: 3 }}>
        {/* Header */}
        <Box sx=\{{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
          <Typography variant="h5" component="h2" fontWeight={700}>
            My Page
          </Typography>
          <Chip
            label="CQRS View"
            size="small"
            sx=\{{
              bgcolor: '#e9ecef',
              color: '#495057',
              fontSize: '0.9em',
            }}
          />
        </Box>

        {/* Query button */}
        <Box sx=\{{ display: 'flex', alignItems: 'center', gap: 1.5, mb: 2.5 }}>
          <Button
            variant="contained"
            onClick={handleRefresh}
            disabled={isLoading}
            startIcon={isLoading ? <CircularProgress size={16} /> : <Refresh />}
            sx=\{{
              px: 2.5,
              py: 1,
              fontWeight: 500,
            }}
          >
            Query
          </Button>
        </Box>

        {/* Data table */}
        <Paper
          elevation={1}
          sx=\{{
            bgcolor: '#fff',
            borderRadius: 1.5,
            border: '1px solid #dee2e6',
            overflow: 'hidden',
          }}
        >
          <TableContainer sx=\{{ overflowX: 'auto' }}>
            <Table sx=\{{ minWidth: 540 }}>
              <TableHead>
                <TableRow sx=\{{ bgcolor: '#f1f3f5' }}>
                  <TableCell sx=\{{ fontWeight: 600, color: '#333', p: 1.5 }}>
                    id
                  </TableCell>
                  <TableCell sx=\{{ fontWeight: 600, color: '#333', p: 1.5 }}>
                    orderId
                  </TableCell>
                  <TableCell sx=\{{ fontWeight: 600, color: '#333', p: 1.5 }}>
                    userId
                  </TableCell>
                  <TableCell sx=\{{ fontWeight: 600, color: '#333', p: 1.5 }}>
                    productName
                  </TableCell>
                  <TableCell sx=\{{ fontWeight: 600, color: '#333', p: 1.5 }}>
                    address
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {data && data.length > 0 ? (
                  data.map((row) => (
                    <TableRow
                      key={row.id}
                      sx=\{{
                        '&:hover': { bgcolor: 'action.hover' },
                        borderBottom: '1px solid #dee2e6',
                      }}
                    >
                      <TableCell sx=\{{ color: '#222', p: 1.5 }}>
                        {row.id}
                      </TableCell>
                      <TableCell sx=\{{ color: '#222', p: 1.5 }}>
                        {row.orderId}
                      </TableCell>
                      <TableCell sx=\{{ color: '#222', p: 1.5 }}>
                        {row.userId}
                      </TableCell>
                      <TableCell sx=\{{ color: '#222', p: 1.5 }}>
                        {row.productName}
                      </TableCell>
                      <TableCell sx=\{{ color: '#222', p: 1.5 }}>
                        {row.address}
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell
                      colSpan={5}
                      sx=\{{
                        textAlign: 'center',
                        py: 2.5,
                        color: '#6c757d',
                      }}
                    >
                      No data available.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        </Paper>
      </CardContent>
    </Card>
  );
};

export default MyPageDashboard;
```

## React Component Conversion Guidelines

When developing new components by referring to the React component examples above, follow these guidelines:

### 1. Component Structure Pattern
```typescript
// ComponentName.tsx
import React, { useState } from 'react';
import { Material-UI components } from '@mui/material';
import { Icons } from '@mui/icons-material';

interface ComponentProps {
  // TypeScript interface definition
  prop1: string;
  prop2?: number;
  onEvent?: (data: any) => void;
}

const ComponentName: React.FC<ComponentProps> = ({
  prop1,
  prop2,
  onEvent,
}) => {
  // State management
  const [state, setState] = useState(initialValue);

  // Event handlers
  const handleEvent = () => {
    // Logic processing
    onEvent?.(data);
  };

  return (
    <Card>
      {/* Material-UI components */}
    </Card>
  );
};

export default ComponentName;
```

### 2. Core Conversion Principles
1. **HTML → Material-UI**: Convert general HTML elements to Material-UI components
2. **Inline Styles → sx Props**: Convert CSS styles to Material-UI's sx prop
3. **JavaScript → React Hooks**: Convert vanilla JS to React Hook patterns
4. **Event Handling**: Use React event handlers like onClick, onSubmit
5. **Conditional Rendering**: Utilize ternary operators and && operators
6. **State Management**: Use React Hooks like useState, useEffect
7. **Type Safety**: Define props types with TypeScript interfaces

### 3. Material-UI Styling Recommendations
- **sx prop**: Use sx prop instead of inline styles
- **Theme Utilization**: Use theme values like theme.palette, theme.spacing
- **Responsive Design**: Utilize breakpoint objects in sx prop
- **Consistency**: Follow Material-UI's design system

### 4. React Hook Pattern Utilization
- **useState**: Local state management
- **useEffect**: Side effect handling
- **useMemo**: Memoization for performance optimization
- **useCallback**: Event handler optimization
- **React Query**: Server state management

### 5. Form Handling Recommendations
- **React Hook Form**: Form state management and validation
- **Yup**: Schema-based validation
- **Controller**: Integration between Material-UI components and React Hook Form

Following these guidelines will help you effectively convert HTML wireframes to React + Material-UI components.