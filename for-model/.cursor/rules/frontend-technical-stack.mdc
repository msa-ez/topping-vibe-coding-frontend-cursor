---
description: Defines modern Frontend technology stack based on Vue 3 + Vite + Vuetify. Optimized technical configuration for rapid development and efficient deployment without errors.
alwaysApply: false
---
# Vue3 + Vite Frontend Technology Stack

Please adhere to the following latest technology stack and development guidelines when generating Frontend code.

## Core Technology Stack

### 1. Project Initialization and Build Tools
- **Vite 5.x**: Next-generation build tool supporting ultra-fast HMR (Hot Module Replacement)
  ```bash
  # Create Vite + Vue project
  pnpm create vite@latest frontend -- --template vue
  ```
- **Node.js 18+**: LTS version recommended
- **pnpm**: Efficient disk space usage and fast installation speed

### 2. Core Framework
- **Vue 3.4+**: Use Composition API and `<script setup>` syntax
  ```javascript
  // main.js
  import { createApp } from 'vue'
  import { createVuetify } from 'vuetify'
  import App from './App.vue'
  
  const app = createApp(App)
  const vuetify = createVuetify()
  
  app.use(vuetify).mount('#app')
  ```

### 3. UI Framework and Styling
- **Vuetify 3.x**: Material Design-based UI component library
  ```bash
  pnpm add vuetify
  pnpm add -D vite-plugin-vuetify
  ```
- **Material Design Icons**: Use `@mdi/font` or `@mdi/js`
- **CSS**: Utilize Vuetify's built-in utility classes

### 4. Routing and State Management
- **Vue Router 4.x**: SPA routing
  ```javascript
  import { createRouter, createWebHistory } from 'vue-router'
  ```
- **Pinia 2.x**: Intuitive and type-safe state management
  ```javascript
  import { defineStore } from 'pinia'
  ```

### 5. HTTP Communication
- **Axios**: Promise-based HTTP client
  ```javascript
  import axios from 'axios'
  
  const api = axios.create({
    baseURL: '/api',
    timeout: 10000
  })
  ```

## Vite 설정 (vite.config.js)

```javascript
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import vuetify, { transformAssetUrls } from 'vite-plugin-vuetify'
import { fileURLToPath, URL } from 'node:url'

export default defineConfig({
  plugins: [
    vue({
      template: { transformAssetUrls }
    }),
    vuetify({
      autoImport: true,
      styles: {
        configFile: 'src/styles/settings.scss'
      }
    })
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  },
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true
      }
    }
  }
})
```

## Project Structure and Development Patterns

### 1. Composition API Pattern
```vue
<script setup>
import { ref, computed, onMounted } from 'vue'
import { useStore } from '@/stores/aggregate'

// Props definition
const props = defineProps({
  title: String
})

// Reactive state
const count = ref(0)
const doubleCount = computed(() => count.value * 2)

// Store usage
const store = useStore()

// Lifecycle hooks
onMounted(async () => {
  await store.fetchData()
})
</script>
```

### 2. Vuetify Component Usage
```vue
<template>
  <v-container>
    <v-row>
      <v-col cols="12" md="6">
        <v-card>
          <v-card-title>{{ title }}</v-card-title>
          <v-card-text>
            <v-btn @click="handleClick" color="primary">
              Click
            </v-btn>
          </v-card-text>
        </v-card>
      </v-col>
    </v-row>
  </v-container>
</template>
```

### 3. API Service Pattern
```javascript
// services/aggregate.service.js
import api from '@/services/api'

export const aggregateService = {
  async getAll() {
    const { data } = await api.get('/aggregates')
    return data
  },
  
  async create(payload) {
    const { data } = await api.post('/aggregates', payload)
    return data
  },
  
  async update(id, payload) {
    const { data } = await api.put(`/aggregates/${id}`, payload)
    return data
  },
  
  async delete(id) {
    await api.delete(`/aggregates/${id}`)
  }
}
```

## Development Tools and Configuration

### 1. VS Code Extensions
- Vue - Official
- Vetur (Vue 2) or Volar (Vue 3)
- ESLint
- Prettier

### 2. ESLint Configuration (.eslintrc.js)
```javascript
module.exports = {
  env: {
    node: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:vue/vue3-recommended',
  ],
  rules: {
    'vue/multi-word-component-names': 'off'
  }
}
```

### 3. Development Scripts (package.json)
```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs --fix --ignore-path .gitignore"
  }
}
```

## Performance Optimization Tips

1. **Component Lazy Loading**
   ```javascript
   const AdminPage = () => import('./views/AdminPage.vue')
   ```

2. **Utilize Vite's Auto Import**
   - Vuetify components are automatically tree-shaken

3. **Image Optimization**
   - Utilize Vite's image import functionality
   - WebP format recommended

## Deployment Considerations

1. **Build Optimization**
   ```bash
   pnpm run build
   ```

2. **Environment Variable Management**
   - `.env.development`
   - `.env.production`

3. **Static Asset Deployment**
   - Deploy `dist` folder to CDN or static hosting service